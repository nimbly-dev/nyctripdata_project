name: CI:run_load_to_psql_stage

on:
  issue_comment:
    types: [created]

jobs:
  trigger_prerequisite:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, 'CI:')
    runs-on: self-hosted
    outputs:
      prerequisite_run_id: ${{ steps.trigger_prerequisite.outputs.prerequisite_run_id }}
      prerequisite_status: ${{ steps.trigger_prerequisite.outputs.status }}
      api_url: ${{ steps.set_variables.outputs.api_url }}
      bearer_token: ${{ steps.set_variables.outputs.bearer_token }}
    steps:
      - name: Check Comment for Command and Set Variables
        id: set_variables
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          if [[ "$COMMENT_BODY" == "CI:yellow:run_load_to_psql_stage" ]]; then
            echo "::set-output name=api_url::http://magic:6789/api/pipeline_schedules/27/pipeline_runs"
            echo "::set-output name=bearer_token::098b10876caf4d589d61c41752515731"
            echo "::set-output name=tripdata_type::yellow_cab_tripdata"
          elif [[ "$COMMENT_BODY" == "CI:green:run_load_to_psql_stage" ]]; then
            echo "::set-output name=api_url::http://magic:6789/api/pipeline_schedules/28/pipeline_runs"
            echo "::set-output name=bearer_token::5809a974ec34498b817e08f7720e2324"
            echo "::set-output name=tripdata_type::green_cab_tripdata"
          elif [[ "$COMMENT_BODY" == "CI:fhv:run_load_to_psql_stage" ]]; then
            echo "::set-output name=api_url::http://magic:6789/api/pipeline_schedules/29/pipeline_runs"
            echo "::set-output name=bearer_token::0b46a5d018c747de852700932756e1a7"
            echo "::set-output name=tripdata_type::fhv_cab_tripdata"
          else
            echo "No matching command found or unsupported cab type."
            exit 1
          fi
            
      - name: Trigger Prerequisite Pipeline
        id: trigger_prerequisite
        env:
          API_URL: ${{ env.api_url }}
          BEARER_TOKEN: ${{ env.bearer_token }}
          TRIPDATA_TYPE: ${{ env.tripdata_type }}
        run: |
          # Send the POST request
          HTTP_RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST "$API_URL" \
            -H "Authorization: Bearer $BEARER_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
                  \"pipeline_run\": {
                    \"variables\": {
                      \"dev_limit_rows\": 1000,
                      \"pipeline_run_name\": \"prerequisite_${TRIPDATA_TYPE}\",
                      \"spark_mode\": \"cluster\",
                      \"tripdata_type\": \"${TRIPDATA_TYPE}\",
                      \"year_month\": \"2023_1\"
                    }
                  }
                }")

          # Log HTTP response code for debugging
          echo "HTTP Response Code: $HTTP_RESPONSE"

          # Check if HTTP response is within success range (200-299)
          if [[ "$HTTP_RESPONSE" -ge 200 && "$HTTP_RESPONSE" -lt 300 ]]; then
            # Check if the response JSON file is non-empty
            if [ -s response.json ]; then
              # Attempt to parse 'pipeline_run.id' using jq
              PREREQUISITE_RUN_ID=$(jq -r '.pipeline_run.id' response.json 2>/dev/null || echo "null")
              
              if [ "$PREREQUISITE_RUN_ID" != "null" ]; then
                # Successfully retrieved ID, set output
                echo "prerequisite_run_id=$PREREQUISITE_RUN_ID" >> $GITHUB_ENV
                echo "status=success" >> $GITHUB_ENV
              else
                # Log error if 'pipeline_run.id' could not be parsed
                echo "Error: Failed to parse 'pipeline_run.id'. Full response:"
                cat response.json
                echo "status=failure" >> $GITHUB_ENV
                exit 1
              fi
            else
              # Handle empty or missing response.json file
              echo "Error: Response file is empty or missing."
              cat response.json
              echo "status=failure" >> $GITHUB_ENV
              exit 1
            fi
          else
            # Handle non-2xx HTTP response
            echo "Error: Non-success HTTP response code ($HTTP_RESPONSE). Full response:"
            cat response.json
            echo "status=failure" >> $GITHUB_ENV
            exit 1
          fi

  monitor_prerequisite:
    runs-on: self-hosted
    needs: trigger_prerequisite
    if: needs.trigger_prerequisite.outputs.status == 'success'
    outputs:
      prerequisite_status: ${{ steps.check_prerequisite_status.outputs.status }}
    steps:
      - name: Monitor Prerequisite Pipeline Status
        id: check_prerequisite_status
        env:
          BEARER_TOKEN: ${{ needs.trigger_prerequisite.outputs.bearer_token }}
          STATUS_API_URL: "http://magic:6789/api/pipeline_runs/${{ needs.trigger_prerequisite.outputs.prerequisite_run_id }}"
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=0
          while [ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]; do
            RESPONSE=$(curl -s -H "Authorization: Bearer $BEARER_TOKEN" "$STATUS_API_URL")
            STATUS=$(echo "$RESPONSE" | jq -r '.pipeline_run.status')
            
            if [[ "$STATUS" == "completed" ]]; then
              echo "status=COMPLETED" >> $GITHUB_ENV
              exit 0
            elif [[ "$STATUS" == "failed" || "$STATUS" == "error" ]]; then
              echo "status=FAILED" >> $GITHUB_ENV
              exit 1
            fi

            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done

          echo "status=TIMED_OUT" >> $GITHUB_ENV
          exit 1

  trigger_psql_stage:
    runs-on: self-hosted
    needs: monitor_prerequisite
    if: needs.monitor_prerequisite.outputs.prerequisite_status == 'COMPLETED'
    outputs:
      psql_run_id: ${{ steps.trigger_psql.outputs.psql_run_id }}
    steps:
      - name: Trigger PSQL Stage Pipeline
        id: trigger_psql
        env:
          API_URL: "http://magic:6789/api/pipeline_schedules/30/pipeline_runs"
          BEARER_TOKEN: ${{ secrets.PSQL_TOKEN }}
          TRIPDATA_TYPE: ${{ needs.trigger_prerequisite.outputs.tripdata_type }}
        run: |
          HTTP_RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST "$API_URL" \
            -H "Authorization: Bearer $BEARER_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
                  \"pipeline_run\": {
                    \"variables\": {
                      \"dev_limit_rows\": 1000,
                      \"pipeline_run_name\": \"workflow_psql_stage_run\",
                      \"spark_mode\": \"cluster\",
                      \"tripdata_type\": \"${TRIPDATA_TYPE}\",
                      \"year_month\": \"2023_1\"
                    }
                  }
                }")

          if [ "$HTTP_RESPONSE" -ge 200 ] && [ "$HTTP_RESPONSE" -lt 300 ]; then
            PSQL_RUN_ID=$(jq -r '.pipeline_run.id' response.json)
            echo "psql_run_id=$PSQL_RUN_ID" >> $GITHUB_ENV
          else
            cat response.json
            exit 1

  monitor_psql_stage:
    runs-on: self-hosted
    needs: trigger_psql_stage
    outputs:
      psql_status: ${{ steps.check_psql_status.outputs.status }}
    steps:
      - name: Monitor PSQL Stage Status
        id: check_psql_status
        env:
          BEARER_TOKEN: ${{ secrets.PSQL_TOKEN }}
          STATUS_API_URL: "http://magic:6789/api/pipeline_runs/${{ needs.trigger_psql_stage.outputs.psql_run_id }}"
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=0
          while [ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]; do
            RESPONSE=$(curl -s -H "Authorization: Bearer $BEARER_TOKEN" "$STATUS_API_URL")
            STATUS=$(echo "$RESPONSE" | jq -r '.pipeline_run.status')
            
            if [[ "$STATUS" == "completed" ]]; then
              echo "status=COMPLETED" >> $GITHUB_ENV
              exit 0
            elif [[ "$STATUS" == "failed" || "$STATUS" == "error" ]]; then
              echo "status=FAILED" >> $GITHUB_ENV
              exit 1
            fi

            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done

          echo "status=TIMED_OUT" >> $GITHUB_ENV
          exit 1

  post_final_comments:
    runs-on: self-hosted
    needs: monitor_psql_stage
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Post Final Status Comment
        run: |
          PR_NUMBER=$(jq .issue.number "$GITHUB_EVENT_PATH")
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          FINAL_STATUS="${{ needs.monitor_psql_stage.outputs.psql_status }}"
          
          case "$FINAL_STATUS" in
            COMPLETED)
              COMMENT="✅ PSQL stage completed successfully.\n\nStatus: **$FINAL_STATUS**\n\n[View workflow run details]($WORKFLOW_URL)"
              ;;
            FAILED)
              COMMENT="❌ PSQL stage failed.\n\nStatus: **$FINAL_STATUS**\n\n[View workflow run details]($WORKFLOW_URL)"
              ;;
            TIMED_OUT)
              COMMENT="⚠️ PSQL stage status check timed out.\n\nStatus: **$FINAL_STATUS**\n\n[View workflow run details]($WORKFLOW_URL)"
              ;;
            *)
              COMMENT="❓ PSQL stage status is unknown.\n\nStatus: **$FINAL_STATUS**\n\n[View workflow run details]($WORKFLOW_URL)"
              ;;
          esac
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"
