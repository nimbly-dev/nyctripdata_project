name: Test CI:run_yellow_etl_dev

on:
  issue_comment:
    types: [created]

jobs:
  trigger_pipeline:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, 'CI:run_yellow_etl_dev')
    runs-on: self-hosted
    outputs:
      pipeline_run_id: ${{ steps.trigger_pipeline.outputs.pipeline_run_id }}
      status: ${{ steps.trigger_pipeline.outputs.status }}
    steps:
      - name: Check Comment for Command
        id: check_comment
        run: |
          if [[ "${{ github.event.comment.body }}" == "CI:run_yellow_etl_dev" ]]; then
            echo "Triggered by CI:run_yellow_etl_dev comment."
            echo "::set-output name=run_pipeline::true"
          else
            echo "No matching command found in comment."
            echo "::set-output name=run_pipeline::false"
          fi

      - name: Generate Dynamic Pipeline Run Name
        if: steps.check_comment.outputs.run_pipeline == 'true'
        id: generate_run_name
        run: |
          TIMESTAMP=$(date +"%d%m%Y_%H%M")
          RUN_NAME="workflow_run_spark_yellow_taxi_etl_to_dev_partition_${TIMESTAMP}"
          echo "pipeline_run_name=$RUN_NAME" >> $GITHUB_ENV

      - name: Trigger Pipeline via API Request
        if: steps.check_comment.outputs.run_pipeline == 'true'
        id: trigger_pipeline
        env:
          API_URL: "http://magic:6789/api/pipeline_schedules/27/pipeline_runs"
          BEARER_TOKEN: "098b10876caf4d589d61c41752515731"
          PIPELINE_RUN_NAME: ${{ env.pipeline_run_name }}
        run: |
          HTTP_RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST "$API_URL" \
            -H "Authorization: Bearer $BEARER_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
                  \"pipeline_run\": {
                    \"variables\": {
                      \"dev_limit_rows\": 1000,
                      \"pipeline_run_name\": \"${PIPELINE_RUN_NAME}\",
                      \"spark_mode\": \"cluster\",
                      \"tripdata_type\": \"yellow_cab_tripdata\",
                      \"year_month\": \"2023_1\"
                    }
                  }
                }")

          if [ "$HTTP_RESPONSE" -ge 200 ] && [ "$HTTP_RESPONSE" -lt 300 ]; then
            echo "Pipeline triggered successfully."
            PIPELINE_RUN_ID=$(jq -r '.pipeline_run.id' response.json)
            echo "::set-output name=pipeline_run_id::$PIPELINE_RUN_ID"
            echo "::set-output name=status::success"
          else
            echo "Error triggering pipeline. HTTP Status: $HTTP_RESPONSE"
            cat response.json
            echo "::set-output name=status::failure"
            exit 1
          fi

      - name: Post Initial "Running" Comment
        if: steps.check_comment.outputs.run_pipeline == 'true' && steps.trigger_pipeline.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq .issue.number "$GITHUB_EVENT_PATH")
          COMMENT="⏳ Pipeline is currently running...\n\n[View workflow run details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"

  monitor_pipeline_status:
    runs-on: self-hosted
    needs: trigger_pipeline
    if: needs.trigger_pipeline.outputs.status == 'success'
    outputs:
      final_status: ${{ steps.check_status.outputs.pipeline_status }}
    steps:
      - name: Monitor Pipeline Status
        id: check_status
        env:
          BEARER_TOKEN: "098b10876caf4d589d61c41752515731"
          STATUS_API_URL: "http://magic:6789/api/pipeline_runs/${{ needs.trigger_pipeline.outputs.pipeline_run_id }}"
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=0
          pipeline_status="RUNNING"

          while [ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]; do
            RESPONSE=$(curl -s -H "Authorization: Bearer $BEARER_TOKEN" "$STATUS_API_URL")
            PIPELINE_STATUS=$(echo "$RESPONSE" | jq -r '.pipeline_run.status')
            BLOCK_STATUSES=$(echo "$RESPONSE" | jq -r '.pipeline_run.block_runs[].status')
            
            echo "Pipeline status: $PIPELINE_STATUS"
            echo "Block statuses: $BLOCK_STATUSES"
            
            if echo "$BLOCK_STATUSES" | grep -q "running"; then
              echo "Pipeline is still running..."
              pipeline_status="RUNNING"
            elif echo "$BLOCK_STATUSES" | grep -q -E "failed|error"; then
              echo "Pipeline failed."
              pipeline_status="FAILED"
              break
            elif ! echo "$BLOCK_STATUSES" | grep -vq "completed"; then
              echo "Pipeline completed successfully."
              pipeline_status="COMPLETED"
              break
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done

          if [[ "$ATTEMPT" -ge "$MAX_ATTEMPTS" ]]; then
            echo "Pipeline status check timed out."
            pipeline_status="TIMED_OUT"
          fi
          echo "::set-output name=pipeline_status::$pipeline_status"

  post_comments:
    runs-on: self-hosted
    needs: [trigger_pipeline, monitor_pipeline_status]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Post Final Status Comment
        run: |
          PR_NUMBER=$(jq .issue.number "$GITHUB_EVENT_PATH")
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          FINAL_STATUS="${{ needs.monitor_pipeline_status.outputs.final_status }}"
          
          case "$FINAL_STATUS" in
            COMPLETED)
              COMMENT="✅ Pipeline completed successfully.\n\nStatus: **$FINAL_STATUS**\n\n[View workflow run details]($WORKFLOW_URL)"
              ;;
            FAILED)
              COMMENT="❌ Pipeline failed during execution.\n\nStatus: **$FINAL_STATUS**\n\n[View workflow run details]($WORKFLOW_URL)"
              ;;
            TIMED_OUT)
              COMMENT="⚠️ Pipeline status check timed out.\n\nStatus: **$FINAL_STATUS**\n\n[View workflow run details]($WORKFLOW_URL)"
              ;;
            *)
              COMMENT="❓ Pipeline status is unknown.\n\nStatus: **$FINAL_STATUS**\n\n[View workflow run details]($WORKFLOW_URL)"
              ;;
          esac
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"
