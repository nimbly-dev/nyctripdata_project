name: Run Pipeline on PR Comment Command

on:
  issue_comment:
    types: [created]

jobs:
  run_pipeline_on_comment:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, 'CI:run_yellow_etl_dev')
    runs-on: self-hosted

    steps:
      - name: Check Comment for Command
        id: check_comment
        run: |
          if [[ "${{ github.event.comment.body }}" == "CI:run_yellow_etl_dev" ]]; then
            echo "Triggered by CI:run_yellow_etl_dev comment."
            echo "::set-output name=run_pipeline::true"
          else
            echo "No matching command found in comment."
            echo "::set-output name=run_pipeline::false"
          fi

      - name: Trigger Pipeline via API Request
        if: steps.check_comment.outputs.run_pipeline == 'true'
        id: trigger_pipeline
        env:
          API_URL: "http://magic:6789/api/pipeline_schedules/27/pipeline_runs"
          BEARER_TOKEN: "098b10876caf4d589d61c41752515731"
        run: |
          HTTP_RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST "$API_URL" \
            -H "Authorization: Bearer $BEARER_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
                  "pipeline_run": {
                    "variables": {
                      "dev_limit_rows": 1000,
                      "pipeline_run_name": "test_workflow_run",
                      "spark_mode": "cluster",
                      "tripdata_type": "yellow_cab_tripdata",
                      "year_month": "2023_1"
                    }
                  }
                }')

          if [ "$HTTP_RESPONSE" -ge 200 ] && [ "$HTTP_RESPONSE" -lt 300 ]; then
            echo "Pipeline triggered successfully."
            PIPELINE_RUN_ID=$(jq -r '.pipeline_run.id' response.json)
            echo "::set-output name=pipeline_run_id::$PIPELINE_RUN_ID"
            echo "::set-output name=status::success"
          else
            echo "Error triggering pipeline. HTTP Status: $HTTP_RESPONSE"
            cat response.json
            echo "::set-output name=status::failure"
            exit 1
          fi

      - name: Monitor Pipeline Status
        if: steps.check_comment.outputs.run_pipeline == 'true' && steps.trigger_pipeline.outputs.status == 'success'
        id: monitor_pipeline_status
        env:
          BEARER_TOKEN: "098b10876caf4d589d61c41752515731"
          STATUS_API_URL: "http://magic:6789/api/pipeline_runs/${{ steps.trigger_pipeline.outputs.pipeline_run_id }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq .issue.number "$GITHUB_EVENT_PATH")
          MAX_ATTEMPTS=30
          ATTEMPT=0
          pipeline_status="RUNNING"
          COMMENT_ID=""

          post_comment() {
            local message=$1
            RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"body\": \"$message\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments")
            COMMENT_ID=$(echo "$RESPONSE" | jq -r '.id')
          }

          update_comment() {
            local message=$1
            curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"body\": \"$message\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$COMMENT_ID"
          }

          # Initial comment that the pipeline is running
          post_comment "⏳ Pipeline is currently running..."

          # Polling loop
          while [ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]; do
            RESPONSE=$(curl -s -H "Authorization: Bearer $BEARER_TOKEN" "$STATUS_API_URL")
            PIPELINE_STATUS=$(echo "$RESPONSE" | jq -r '.pipeline_run.status')
            BLOCK_STATUSES=$(echo "$RESPONSE" | jq -r '.pipeline_run.block_runs[].status')
            
            echo "Pipeline status: $PIPELINE_STATUS"
            echo "Block statuses: $BLOCK_STATUSES"
            
            if echo "$BLOCK_STATUSES" | grep -q "running"; then
              echo "Pipeline is still running..."
              pipeline_status="RUNNING"
            elif echo "$BLOCK_STATUSES" | grep -q -E "failed|error"; then
              echo "Pipeline failed."
              pipeline_status="FAILED"
              break
            elif ! echo "$BLOCK_STATUSES" | grep -vq "completed"; then
              echo "Pipeline completed successfully."
              pipeline_status="COMPLETED"
              break
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done

          if [[ "$ATTEMPT" -ge "$MAX_ATTEMPTS" ]]; then
            echo "Pipeline status check timed out."
            pipeline_status="TIMED_OUT"
          fi

          # Final status update
          case "$pipeline_status" in
            COMPLETED)
              update_comment "✅ Pipeline completed successfully."
              ;;
            FAILED)
              update_comment "❌ Pipeline failed during execution."
              ;;
            TIMED_OUT)
              update_comment "⚠️ Pipeline status check timed out."
              ;;
            *)
              update_comment "❓ Pipeline status is unknown."
              ;;
          esac
          echo "pipeline_status=$pipeline_status" >> $GITHUB_ENV
